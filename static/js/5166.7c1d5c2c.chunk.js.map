{"version":3,"file":"static/js/5166.7c1d5c2c.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-emoji/browser/EmojiDrawer.js","../node_modules/@tsparticles/shape-emoji/browser/Utils.js"],"sourcesContent":["import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nimport { validTypes } from \"./Constants.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"';\nexport class EmojiDrawer {\n    constructor() {\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, emojiData] of this._emojiShapeDict) {\n            if (emojiData instanceof ImageBitmap) {\n                emojiData?.close();\n                this._emojiShapeDict.delete(key);\n            }\n        }\n    }\n    draw(data) {\n        drawEmoji(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map((t) => options.particles.shape.options[t])\n            .find((t) => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        delete particle.emojiData;\n    }\n    particleInit(container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;\n        if (!emoji) {\n            return;\n        }\n        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);\n        if (existingData) {\n            particle.emojiData = existingData;\n            return;\n        }\n        const canvasSize = getRangeMax(particle.size.value) * double;\n        let emojiData;\n        const maxSize = getRangeMax(particle.size.value);\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(emoji, maxSize, maxSize);\n            emojiData = canvas;\n        }\n        this._emojiShapeDict.set(key, emojiData);\n        particle.emojiData = emojiData;\n    }\n}\n","export function drawEmoji(data) {\n    const { context, particle, radius, opacity } = data, emojiData = particle.emojiData, double = 2, diameter = radius * double, previousAlpha = context.globalAlpha;\n    if (!emojiData) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(emojiData, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n"],"names":["defaultFont","EmojiDrawer","_classCallCheck","this","_emojiShapeDict","Map","_createClass","key","value","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","_slicedToArray","emojiData","ImageBitmap","close","delete","err","e","f","data","context","particle","radius","opacity","diameter","previousAlpha","globalAlpha","drawImage","drawEmoji","_init","_asyncToGenerator","_regeneratorRuntime","mark","_callee","container","options","promises","shapeOptions","wrap","_context","prev","next","actualOptions","validTypes","t","isInArray","particles","shape","type","abrupt","loadFont","find","executeOnSingleOrMultiple","font","push","Promise","all","stop","_x","apply","arguments","_shapeData$font","shapeData","emoji","itemFromSingleOrMultiple","randomIndexData","concat","existingData","get","canvasSize","getRangeMax","size","maxSize","OffscreenCanvas","canvas","getContext","textBaseline","textAlign","fillText","transferToImageBitmap","document","createElement","width","height","set"],"sourceRoot":""}